{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","href","title","onClick","toggle","type","id","defaultProps","TextForm","useState","text","setState","placeholder","onChange","e","target","value","rows","disabled","length","toUpperCase","showAlert","toLowerCase","downloadButton","document","createElement","setAttribute","encodeURIComponent","body","append","click","removeChild","navigator","clipboard","writeText","newText","split","join","filter","element","Alert","style","height","alert","role","word","x","slice","capital","msg","App","setMode","setAlert","message","setTimeout","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6cad2e68.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg text-${props.mode} navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n            <div className=\"form-check form-switch d-flex m-1 justify-content-end\">\r\n              <input\r\n                className=\"form-check-input \"\r\n                onClick={props.toggle}\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n            </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavBar.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  title: \"DefaultTitle\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const changeText = (e) => {\r\n    // console.log(e.target.value);\r\n    // console.log(\"change in form\");\r\n    setState(e.target.value);\r\n  };\r\n\r\n  const convertUpper = () => {\r\n    // console.log(\"changes to upper\");\r\n    setState(text.toUpperCase());\r\n    props.showAlert(\"Converted in UpperCase\",\"success\")\r\n  };\r\n\r\n  const convertLower = () => {\r\n    // console.log(\"changes to lower\");\r\n    setState(text.toLowerCase());\r\n    props.showAlert(\"Converted in LowerCase\",\"success\")\r\n  };\r\n\r\n  const XtraLine = () => {\r\n    // console.log(\"Extra Space Remover\");\r\n    let newText = text.split(/[ ]+/);\r\n    setState(newText.join(\" \"));\r\n    props.showAlert(\"Extra Line Removed\",\"success\")\r\n  };\r\n\r\n  const download = () => {\r\n    // console.log(\"Request to Download the text\");\r\n    let downloadButton = document.createElement(\"a\");\r\n    downloadButton.setAttribute(\r\n      \"href\",\r\n      \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\r\n    );\r\n    downloadButton.setAttribute(\"download\", \"text.txt\");\r\n    document.body.append(downloadButton);\r\n    downloadButton.click();\r\n    document.body.removeChild(downloadButton);\r\n  };\r\n\r\n  const clear = () => {\r\n    // console.log(\"Clear Text\");\r\n    setState(\"\");\r\n    props.showAlert(\"Text Cleared\",\"success\")\r\n  };\r\n\r\n  const [text, setState] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div>\r\n      <h1\r\n          className={`text-center m-3 text-${\r\n            props.mode === \"light\" ? \"dark\" : \"light\"\r\n          }`}\r\n        >\r\n          Enter Text to Analysis\r\n        </h1>\r\n        <div className=\"my-3\">\r\n          <textarea\r\n            placeholder=\"Enter Text\"\r\n            onChange={changeText}\r\n            className={`form-control border-primary p-2 bg-${\r\n              props.mode === \"light\" ? \"light\" : \"dark\"\r\n            } text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}\r\n            value={text}\r\n            id=\"textt\"\r\n            rows=\"5\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary  m-1\" onClick={convertUpper}>\r\n          UpperCase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={convertLower}>\r\n          LowerCase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={clear}>\r\n          ClearText\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={download}>\r\n          DownloadText\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={() => {navigator.clipboard.writeText(text); props.showAlert(\"Text Copied\",\"success\")} }>\r\n          CopyText\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary m-1\" onClick={XtraLine}>\r\n          Spaceremove\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h2\r\n          className={`my-3 text-center text-${\r\n            props.mode === \"light\" ? \"dark\" : \"light\"\r\n          }`}\r\n        >\r\n          Your Text Summary\r\n        </h2>\r\n        <div className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n          Words : {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} <br />\r\n          Characters : {text.length}\r\n          <br /> Time Required to read your Text : {0.008 * text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes\r\n        </div>\r\n        <h2\r\n          className={`my-3 text-center text-${\r\n            props.mode === \"light\" ? \"dark\" : \"light\"\r\n          }`}\r\n        >\r\n          Your Text Preview\r\n        </h2>\r\n        <div className={`text-${\r\n            props.mode === \"light\" ? \"dark\" : \"light\"\r\n          }`}>\r\n        {text}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capital = (word) => {\r\n    let x = word.toLowerCase();\r\n    return x[0].toUpperCase() + x.slice(1);\r\n  };\r\n  return (\r\n    <div style={{height:'60px'}}>\r\n      {props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capital(props.alert.type)} : </strong>\r\n        {props.alert.msg}\r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import NavBar from \"./components/NavBar\";\nimport \"./App.css\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const toggle = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark mode Enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"\";\n      showAlert(\"Light mode Enabled\", \"success\");\n    }\n  };\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  return (\n    <>\n      <NavBar title=\"TextUtils\" mode={mode} toggle={toggle} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <TextForm showAlert={showAlert} mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}